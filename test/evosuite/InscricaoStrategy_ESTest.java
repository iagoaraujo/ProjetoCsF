/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 21:58:39 GMT 2017
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import models.InscricaoAberta;
import models.InscricaoLimitada;
import models.Viagem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InscricaoStrategy_ESTest extends InscricaoStrategy_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 4 covered goals:
   * Goal 1. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 2. [Output]: models.InscricaoStrategy.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:True
   * Goal 3. [METHOD] models.InscricaoStrategy.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 4. [METHODNOEX] models.InscricaoStrategy.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      Viagem viagem0 = new Viagem();
      boolean boolean0 = inscricaoAberta0.validaInscricao(viagem0, "P +&1Gz94LVl<>");
      assertTrue(boolean0);
  }

  //Test case number: 1
  /*
   * 18 covered goals:
   * Goal 1. models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch
   * Goal 2. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 3. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch
   * Goal 4. Branch models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch in context: models.InscricaoStrategy:getId()Ljava/lang/Long;
   * Goal 5. Branch models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch in context: models.InscricaoStrategy:setId(Ljava/lang/Long;)V
   * Goal 6. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:byteValue()B:Zero
   * Goal 7. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:doubleValue()D:Zero
   * Goal 8. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:floatValue()F:Zero
   * Goal 9. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:intValue()I:Zero
   * Goal 10. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:longValue()J:Zero
   * Goal 11. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:shortValue()S:Zero
   * Goal 12. models.InscricaoStrategy.getId()Ljava/lang/Long;: Line 20
   * Goal 13. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 24
   * Goal 14. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 25
   * Goal 15. [METHOD] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 16. [METHOD] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   * Goal 17. [METHODNOEX] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 18. [METHODNOEX] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      Long long0 = new Long(0L);
      inscricaoLimitada0.setId(long0);
      Long long1 = inscricaoLimitada0.getId();
      assertEquals(0L, (long)long1);
  }

  //Test case number: 2
  /*
   * 18 covered goals:
   * Goal 1. models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch
   * Goal 2. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 3. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch
   * Goal 4. Branch models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch in context: models.InscricaoStrategy:getId()Ljava/lang/Long;
   * Goal 5. Branch models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch in context: models.InscricaoStrategy:setId(Ljava/lang/Long;)V
   * Goal 6. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:byteValue()B:Positive
   * Goal 7. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:doubleValue()D:Positive
   * Goal 8. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:floatValue()F:Positive
   * Goal 9. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:intValue()I:Positive
   * Goal 10. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:longValue()J:Positive
   * Goal 11. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:shortValue()S:Positive
   * Goal 12. models.InscricaoStrategy.getId()Ljava/lang/Long;: Line 20
   * Goal 13. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 24
   * Goal 14. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 25
   * Goal 15. [METHOD] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 16. [METHOD] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   * Goal 17. [METHODNOEX] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 18. [METHODNOEX] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      Long long0 = new Long(1076L);
      inscricaoLimitada0.setId(long0);
      Long long1 = inscricaoLimitada0.getId();
      assertEquals(1076L, (long)long1);
  }

  //Test case number: 3
  /*
   * 18 covered goals:
   * Goal 1. models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch
   * Goal 2. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 3. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch
   * Goal 4. Branch models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch in context: models.InscricaoStrategy:getId()Ljava/lang/Long;
   * Goal 5. Branch models.InscricaoStrategy.setId(Ljava/lang/Long;)V: root-Branch in context: models.InscricaoStrategy:setId(Ljava/lang/Long;)V
   * Goal 6. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:byteValue()B:Negative
   * Goal 7. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:doubleValue()D:Negative
   * Goal 8. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:floatValue()F:Negative
   * Goal 9. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:intValue()I:Negative
   * Goal 10. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:longValue()J:Negative
   * Goal 11. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:NonNull:java.lang.Long:shortValue()S:Negative
   * Goal 12. models.InscricaoStrategy.getId()Ljava/lang/Long;: Line 20
   * Goal 13. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 24
   * Goal 14. models.InscricaoStrategy.setId(Ljava/lang/Long;)V: Line 25
   * Goal 15. [METHOD] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 16. [METHOD] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   * Goal 17. [METHODNOEX] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 18. [METHODNOEX] models.InscricaoStrategy.setId(Ljava/lang/Long;)V
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      Long long0 = new Long((-1060L));
      inscricaoAberta0.setId(long0);
      Long long1 = inscricaoAberta0.getId();
      assertEquals((-1060L), (long)long1);
  }

  //Test case number: 4
  /*
   * 4 covered goals:
   * Goal 1. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 2. [Output]: models.InscricaoStrategy.exigeSenha()Z:True
   * Goal 3. [METHOD] models.InscricaoStrategy.exigeSenha()Z
   * Goal 4. [METHODNOEX] models.InscricaoStrategy.exigeSenha()Z
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      boolean boolean0 = inscricaoLimitada0.exigeSenha();
      assertTrue(boolean0);
  }

  //Test case number: 5
  /*
   * 4 covered goals:
   * Goal 1. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 2. [Output]: models.InscricaoStrategy.exigeSenha()Z:False
   * Goal 3. [METHOD] models.InscricaoStrategy.exigeSenha()Z
   * Goal 4. [METHODNOEX] models.InscricaoStrategy.exigeSenha()Z
   */

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      boolean boolean0 = inscricaoAberta0.exigeSenha();
      assertFalse(boolean0);
  }

  //Test case number: 6
  /*
   * 3 covered goals:
   * Goal 1. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 2. validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z_org.evosuite.runtime.mock.java.lang.MockRuntimeException_EXPLICIT
   * Goal 3. [METHOD] models.InscricaoStrategy.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   */

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Viagem viagem0 = new Viagem();
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      // Undeclared exception!
      try { 
        inscricaoLimitada0.validaInscricao(viagem0, "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Viagem precisa ter senha para ser limitada.
         //
         assertThrownBy("models.InscricaoLimitada", e);
      }
  }

  //Test case number: 7
  /*
   * 3 covered goals:
   * Goal 1. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 2. validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z_java.lang.NullPointerException_IMPLICIT
   * Goal 3. [METHOD] models.InscricaoStrategy.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   */

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      // Undeclared exception!
      try { 
        inscricaoLimitada0.validaInscricao((Viagem) null, ":c+ofS");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.InscricaoLimitada", e);
      }
  }

  //Test case number: 8
  /*
   * 7 covered goals:
   * Goal 1. models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch
   * Goal 2. models.InscricaoStrategy.<init>()V: root-Branch
   * Goal 3. Branch models.InscricaoStrategy.getId()Ljava/lang/Long;: root-Branch in context: models.InscricaoStrategy:getId()Ljava/lang/Long;
   * Goal 4. [Output]: models.InscricaoStrategy.getId()Ljava/lang/Long;:Null
   * Goal 5. models.InscricaoStrategy.getId()Ljava/lang/Long;: Line 20
   * Goal 6. [METHOD] models.InscricaoStrategy.getId()Ljava/lang/Long;
   * Goal 7. [METHODNOEX] models.InscricaoStrategy.getId()Ljava/lang/Long;
   */

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      Long long0 = inscricaoAberta0.getId();
      assertNull(long0);
  }
}
