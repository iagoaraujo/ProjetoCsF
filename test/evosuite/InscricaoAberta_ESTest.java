/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 21:45:46 GMT 2017
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import models.InscricaoAberta;
import models.Viagem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InscricaoAberta_ESTest extends InscricaoAberta_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 11 covered goals:
   * Goal 1. models.InscricaoAberta.<init>()V: root-Branch
   * Goal 2. models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: root-Branch
   * Goal 3. Branch models.InscricaoAberta.<init>()V: root-Branch in context: models.InscricaoAberta:<init>()V
   * Goal 4. Branch models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: root-Branch in context: models.InscricaoAberta:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 5. [Output]: models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:True
   * Goal 6. models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 10
   * Goal 7. [METHOD] models.InscricaoAberta.<init>()V
   * Goal 8. [METHOD] models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 9. [METHODNOEX] models.InscricaoAberta.<init>()V
   * Goal 10. [METHODNOEX] models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 11. Weak Mutation 0: models.InscricaoAberta.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:10 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Viagem viagem0 = new Viagem();
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      boolean boolean0 = inscricaoAberta0.validaInscricao(viagem0, (String) null);
      assertTrue(boolean0);
  }

  //Test case number: 1
  /*
   * 11 covered goals:
   * Goal 1. models.InscricaoAberta.<init>()V: root-Branch
   * Goal 2. models.InscricaoAberta.exigeSenha()Z: root-Branch
   * Goal 3. Branch models.InscricaoAberta.<init>()V: root-Branch in context: models.InscricaoAberta:<init>()V
   * Goal 4. Branch models.InscricaoAberta.exigeSenha()Z: root-Branch in context: models.InscricaoAberta:exigeSenha()Z
   * Goal 5. [Output]: models.InscricaoAberta.exigeSenha()Z:False
   * Goal 6. models.InscricaoAberta.exigeSenha()Z: Line 15
   * Goal 7. [METHOD] models.InscricaoAberta.<init>()V
   * Goal 8. [METHOD] models.InscricaoAberta.exigeSenha()Z
   * Goal 9. [METHODNOEX] models.InscricaoAberta.<init>()V
   * Goal 10. [METHODNOEX] models.InscricaoAberta.exigeSenha()Z
   * Goal 11. Weak Mutation 1: models.InscricaoAberta.exigeSenha()Z:15 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      InscricaoAberta inscricaoAberta0 = new InscricaoAberta();
      boolean boolean0 = inscricaoAberta0.exigeSenha();
      assertFalse(boolean0);
  }
}
