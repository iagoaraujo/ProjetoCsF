/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 21:50:21 GMT 2017
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import models.InscricaoLimitada;
import models.Viagem;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class InscricaoLimitada_ESTest extends InscricaoLimitada_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 7 covered goals:
   * Goal 1. models.InscricaoLimitada.<init>()V: root-Branch
   * Goal 2. Branch models.InscricaoLimitada.<init>()V: root-Branch in context: models.InscricaoLimitada:<init>()V
   * Goal 3. validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z_java.lang.NullPointerException_IMPLICIT
   * Goal 4. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 10
   * Goal 5. [METHOD] models.InscricaoLimitada.<init>()V
   * Goal 6. [METHOD] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 7. [METHODNOEX] models.InscricaoLimitada.<init>()V
   */

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      // Undeclared exception!
      try { 
        inscricaoLimitada0.validaInscricao((Viagem) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.InscricaoLimitada", e);
      }
  }

  //Test case number: 1
  /*
   * 17 covered goals:
   * Goal 1. models.InscricaoLimitada.<init>()V: root-Branch
   * Goal 2. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - true
   * Goal 3. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I18 Branch 2 IFLE L13 - true
   * Goal 4. Branch models.InscricaoLimitada.<init>()V: root-Branch in context: models.InscricaoLimitada:<init>()V
   * Goal 5. Branch models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - true in context: models.InscricaoLimitada:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 6. Branch models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I18 Branch 2 IFLE L13 - true in context: models.InscricaoLimitada:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 7. [Output]: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:False
   * Goal 8. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 10
   * Goal 9. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 13
   * Goal 10. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 16
   * Goal 11. [METHOD] models.InscricaoLimitada.<init>()V
   * Goal 12. [METHOD] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 13. [METHODNOEX] models.InscricaoLimitada.<init>()V
   * Goal 14. [METHODNOEX] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 15. Weak Mutation 0: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:10 - ReplaceComparisonOperator != null -> = null
   * Goal 16. Weak Mutation 3: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:13 - ReplaceComparisonOperator <= -> ==
   * Goal 17. Weak Mutation 6: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:16 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Viagem viagem0 = new Viagem();
      viagem0.setSenha("]X$W<; NuF/v");
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      boolean boolean0 = inscricaoLimitada0.validaInscricao(viagem0, "]X$W=< NuF/v");
      assertFalse(boolean0);
  }

  //Test case number: 2
  /*
   * 12 covered goals:
   * Goal 1. models.InscricaoLimitada.<init>()V: root-Branch
   * Goal 2. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - false
   * Goal 3. Branch models.InscricaoLimitada.<init>()V: root-Branch in context: models.InscricaoLimitada:<init>()V
   * Goal 4. Branch models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - false in context: models.InscricaoLimitada:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 5. validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z_org.evosuite.runtime.mock.java.lang.MockRuntimeException_EXPLICIT
   * Goal 6. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 10
   * Goal 7. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 11
   * Goal 8. [METHOD] models.InscricaoLimitada.<init>()V
   * Goal 9. [METHOD] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 10. [METHODNOEX] models.InscricaoLimitada.<init>()V
   * Goal 11. Weak Mutation 0: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:10 - ReplaceComparisonOperator != null -> = null
   * Goal 12. Weak Mutation 1: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:11 - ReplaceConstant - Viagem precisa ter senha para ser limitada. -> 
   */

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Viagem viagem0 = new Viagem();
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      // Undeclared exception!
      try { 
        inscricaoLimitada0.validaInscricao(viagem0, (String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Viagem precisa ter senha para ser limitada.
         //
         assertThrownBy("models.InscricaoLimitada", e);
      }
  }

  //Test case number: 3
  /*
   * 17 covered goals:
   * Goal 1. models.InscricaoLimitada.<init>()V: root-Branch
   * Goal 2. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - true
   * Goal 3. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I18 Branch 2 IFLE L13 - false
   * Goal 4. Branch models.InscricaoLimitada.<init>()V: root-Branch in context: models.InscricaoLimitada:<init>()V
   * Goal 5. Branch models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I4 Branch 1 IFNONNULL L10 - true in context: models.InscricaoLimitada:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 6. Branch models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: I18 Branch 2 IFLE L13 - false in context: models.InscricaoLimitada:validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 7. [Output]: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:True
   * Goal 8. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 10
   * Goal 9. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 13
   * Goal 10. models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z: Line 14
   * Goal 11. [METHOD] models.InscricaoLimitada.<init>()V
   * Goal 12. [METHOD] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 13. [METHODNOEX] models.InscricaoLimitada.<init>()V
   * Goal 14. [METHODNOEX] models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z
   * Goal 15. Weak Mutation 0: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:10 - ReplaceComparisonOperator != null -> = null
   * Goal 16. Weak Mutation 2: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:13 - ReplaceComparisonOperator <= -> -1
   * Goal 17. Weak Mutation 5: models.InscricaoLimitada.validaInscricao(Lmodels/Viagem;Ljava/lang/String;)Z:14 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Viagem viagem0 = new Viagem();
      viagem0.setSenha("]X$W<; NuF/v");
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      boolean boolean0 = inscricaoLimitada0.validaInscricao(viagem0, "]X$W<; NuF/v");
      assertTrue(boolean0);
  }

  //Test case number: 4
  /*
   * 11 covered goals:
   * Goal 1. models.InscricaoLimitada.<init>()V: root-Branch
   * Goal 2. models.InscricaoLimitada.exigeSenha()Z: root-Branch
   * Goal 3. Branch models.InscricaoLimitada.<init>()V: root-Branch in context: models.InscricaoLimitada:<init>()V
   * Goal 4. Branch models.InscricaoLimitada.exigeSenha()Z: root-Branch in context: models.InscricaoLimitada:exigeSenha()Z
   * Goal 5. [Output]: models.InscricaoLimitada.exigeSenha()Z:True
   * Goal 6. models.InscricaoLimitada.exigeSenha()Z: Line 21
   * Goal 7. [METHOD] models.InscricaoLimitada.<init>()V
   * Goal 8. [METHOD] models.InscricaoLimitada.exigeSenha()Z
   * Goal 9. [METHODNOEX] models.InscricaoLimitada.<init>()V
   * Goal 10. [METHODNOEX] models.InscricaoLimitada.exigeSenha()Z
   * Goal 11. Weak Mutation 7: models.InscricaoLimitada.exigeSenha()Z:21 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      InscricaoLimitada inscricaoLimitada0 = new InscricaoLimitada();
      boolean boolean0 = inscricaoLimitada0.exigeSenha();
      assertTrue(boolean0);
  }
}
