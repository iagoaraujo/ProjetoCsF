/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 19 22:27:50 GMT 2017
 */

package evosuite;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import models.Usuario;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.TooManyResourcesException;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Usuario_ESTest extends Usuario_ESTest_scaffolding {

  //Test case number: 0
  /*
   * 11 covered goals:
   * Goal 1. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. Branch models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch in context: models.Usuario:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
   * Goal 3. <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 4. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 23
   * Goal 5. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 24
   * Goal 6. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 25
   * Goal 7. [METHOD] models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
   * Goal 8. Weak Mutation 0: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:23 - ReplaceVariable nome -> login
   * Goal 9. Weak Mutation 2: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:24 - ReplaceVariable login -> senha
   * Goal 10. Weak Mutation 3: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:24 - ReplaceVariable login -> nome
   * Goal 11. Weak Mutation 4: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:25 - ReplaceVariable senha -> login
   */

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Usuario usuario0 = null;
      try {
        usuario0 = new Usuario("%w~n{lEqk", "w-Z0wg1dt", "%w~n{lEqk");
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 1
  /*
   * 17 covered goals:
   * Goal 1. models.Usuario.getNome()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 3. models.Usuario.<init>()V: root-Branch
   * Goal 4. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 5. Branch models.Usuario.getNome()Ljava/lang/String;: root-Branch in context: models.Usuario:getNome()Ljava/lang/String;
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. [Output]: models.Usuario.getNome()Ljava/lang/String;:NonEmptyString
   * Goal 8. models.Usuario.<init>()V: Line 20
   * Goal 9. models.Usuario.getNome()Ljava/lang/String;: Line 33
   * Goal 10. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 11. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 12. [METHOD] models.Usuario.<init>()V
   * Goal 13. [METHOD] models.Usuario.getNome()Ljava/lang/String;
   * Goal 14. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 15. [METHODNOEX] models.Usuario.<init>()V
   * Goal 16. [METHODNOEX] models.Usuario.getNome()Ljava/lang/String;
   * Goal 17. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   */

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setNome(" qw^-wVSK0.gu");
      String string0 = usuario0.getNome();
      assertEquals(" qw^-wVSK0.gu", string0);
  }

  //Test case number: 2
  /*
   * 17 covered goals:
   * Goal 1. models.Usuario.getEmail()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 3. models.Usuario.<init>()V: root-Branch
   * Goal 4. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 5. Branch models.Usuario.getEmail()Ljava/lang/String;: root-Branch in context: models.Usuario:getEmail()Ljava/lang/String;
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. [Output]: models.Usuario.getEmail()Ljava/lang/String;:NonEmptyString
   * Goal 8. models.Usuario.<init>()V: Line 20
   * Goal 9. models.Usuario.getEmail()Ljava/lang/String;: Line 41
   * Goal 10. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 11. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 12. [METHOD] models.Usuario.<init>()V
   * Goal 13. [METHOD] models.Usuario.getEmail()Ljava/lang/String;
   * Goal 14. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 15. [METHODNOEX] models.Usuario.<init>()V
   * Goal 16. [METHODNOEX] models.Usuario.getEmail()Ljava/lang/String;
   * Goal 17. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   */

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("&7MCs$d\"4@");
      String string0 = usuario0.getEmail();
      assertEquals("&7MCs$d\"4@", string0);
  }

  //Test case number: 3
  /*
   * 58 covered goals:
   * Goal 1. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - true
   * Goal 9. models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - true
   * Goal 10. models.Usuario.equals(Ljava/lang/Object;)Z: I91 Branch 12 IFGT L92 - true
   * Goal 11. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 12. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 13. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 14. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 18. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 19. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 20. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I91 Branch 12 IFGT L92 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 21. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:True
   * Goal 22. models.Usuario.<init>()V: Line 20
   * Goal 23. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 24. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 27. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 28. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 29. models.Usuario.equals(Ljava/lang/Object;)Z: Line 82
   * Goal 30. models.Usuario.equals(Ljava/lang/Object;)Z: Line 88
   * Goal 31. models.Usuario.equals(Ljava/lang/Object;)Z: Line 92
   * Goal 32. models.Usuario.equals(Ljava/lang/Object;)Z: Line 95
   * Goal 33. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 34. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 35. [METHOD] models.Usuario.<init>()V
   * Goal 36. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 37. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 38. [METHODNOEX] models.Usuario.<init>()V
   * Goal 39. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 40. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 41. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 42. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 46. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 47. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 48. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 52. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 53. Weak Mutation 95: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceVariable other -> this
   * Goal 54. Weak Mutation 96: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceComparisonOperator = null -> != null
   * Goal 55. Weak Mutation 103: models.Usuario.equals(Ljava/lang/Object;)Z:88 - ReplaceComparisonOperator != null -> = null
   * Goal 56. Weak Mutation 107: models.Usuario.equals(Ljava/lang/Object;)Z:92 - ReplaceVariable other -> this
   * Goal 57. Weak Mutation 108: models.Usuario.equals(Ljava/lang/Object;)Z:92 - ReplaceComparisonOperator > -> -2
   * Goal 58. Weak Mutation 112: models.Usuario.equals(Ljava/lang/Object;)Z:95 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setNome("Mlc#*AA8@");
      Usuario usuario1 = new Usuario();
      assertFalse(usuario1.equals((Object)usuario0));
      
      usuario1.setNome("Mlc#*AA8@");
      boolean boolean0 = usuario0.equals(usuario1);
      assertTrue(usuario1.equals((Object)usuario0));
      assertTrue(boolean0);
  }

  //Test case number: 4
  /*
   * 64 covered goals:
   * Goal 1. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 3. models.Usuario.<init>()V: root-Branch
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true
   * Goal 9. models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - true
   * Goal 10. models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - false
   * Goal 11. models.Usuario.equals(Ljava/lang/Object;)Z: I79 Branch 11 IFNULL L89 - false
   * Goal 12. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 13. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 14. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 18. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 19. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 20. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 21. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 22. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I79 Branch 11 IFNULL L89 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 23. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 24. models.Usuario.<init>()V: Line 20
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 27. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 28. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 29. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 30. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 31. models.Usuario.equals(Ljava/lang/Object;)Z: Line 85
   * Goal 32. models.Usuario.equals(Ljava/lang/Object;)Z: Line 88
   * Goal 33. models.Usuario.equals(Ljava/lang/Object;)Z: Line 89
   * Goal 34. models.Usuario.equals(Ljava/lang/Object;)Z: Line 90
   * Goal 35. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 36. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 37. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 38. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 39. [METHOD] models.Usuario.<init>()V
   * Goal 40. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 41. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 42. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 43. [METHODNOEX] models.Usuario.<init>()V
   * Goal 44. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 45. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 46. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 47. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 48. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 49. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 50. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 51. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 52. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 53. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 54. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 55. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 56. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 57. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 58. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 59. Weak Mutation 98: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceVariable other -> this
   * Goal 60. Weak Mutation 99: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceComparisonOperator > -> -2
   * Goal 61. Weak Mutation 103: models.Usuario.equals(Ljava/lang/Object;)Z:88 - ReplaceComparisonOperator != null -> = null
   * Goal 62. Weak Mutation 104: models.Usuario.equals(Ljava/lang/Object;)Z:89 - ReplaceVariable other -> this
   * Goal 63. Weak Mutation 105: models.Usuario.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator = null -> != null
   * Goal 64. Weak Mutation 106: models.Usuario.equals(Ljava/lang/Object;)Z:90 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("q~4p?9ZfSdoJ84XQMJ");
      Usuario usuario1 = new Usuario();
      usuario1.setNome("q~4p?9ZfSdoJ84XQMJ");
      usuario1.setEmail("q~4p?9ZfSdoJ84XQMJ");
      boolean boolean0 = usuario0.equals(usuario1);
      assertFalse(boolean0);
  }

  //Test case number: 5
  /*
   * 58 covered goals:
   * Goal 1. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - true
   * Goal 9. models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - true
   * Goal 10. models.Usuario.equals(Ljava/lang/Object;)Z: I91 Branch 12 IFGT L92 - false
   * Goal 11. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 12. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 13. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 14. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 18. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 19. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 20. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I91 Branch 12 IFGT L92 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 21. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 22. models.Usuario.<init>()V: Line 20
   * Goal 23. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 24. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 27. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 28. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 29. models.Usuario.equals(Ljava/lang/Object;)Z: Line 82
   * Goal 30. models.Usuario.equals(Ljava/lang/Object;)Z: Line 88
   * Goal 31. models.Usuario.equals(Ljava/lang/Object;)Z: Line 92
   * Goal 32. models.Usuario.equals(Ljava/lang/Object;)Z: Line 93
   * Goal 33. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 34. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 35. [METHOD] models.Usuario.<init>()V
   * Goal 36. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 37. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 38. [METHODNOEX] models.Usuario.<init>()V
   * Goal 39. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 40. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 41. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 42. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 46. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 47. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 48. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 52. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 53. Weak Mutation 95: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceVariable other -> this
   * Goal 54. Weak Mutation 96: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceComparisonOperator = null -> != null
   * Goal 55. Weak Mutation 103: models.Usuario.equals(Ljava/lang/Object;)Z:88 - ReplaceComparisonOperator != null -> = null
   * Goal 56. Weak Mutation 107: models.Usuario.equals(Ljava/lang/Object;)Z:92 - ReplaceVariable other -> this
   * Goal 57. Weak Mutation 109: models.Usuario.equals(Ljava/lang/Object;)Z:92 - ReplaceComparisonOperator > -> !=
   * Goal 58. Weak Mutation 111: models.Usuario.equals(Ljava/lang/Object;)Z:93 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setNome("Mlc#*AA8@");
      Usuario usuario1 = new Usuario();
      boolean boolean0 = usuario0.equals(usuario1);
      assertFalse(boolean0);
  }

  //Test case number: 6
  /*
   * 58 covered goals:
   * Goal 1. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - true
   * Goal 9. models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - false
   * Goal 10. models.Usuario.equals(Ljava/lang/Object;)Z: I79 Branch 11 IFNULL L89 - true
   * Goal 11. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 12. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 13. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 14. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 18. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 19. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I74 Branch 10 IFNONNULL L88 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 20. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I79 Branch 11 IFNULL L89 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 21. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:True
   * Goal 22. models.Usuario.<init>()V: Line 20
   * Goal 23. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 24. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 27. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 28. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 29. models.Usuario.equals(Ljava/lang/Object;)Z: Line 85
   * Goal 30. models.Usuario.equals(Ljava/lang/Object;)Z: Line 88
   * Goal 31. models.Usuario.equals(Ljava/lang/Object;)Z: Line 89
   * Goal 32. models.Usuario.equals(Ljava/lang/Object;)Z: Line 95
   * Goal 33. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 34. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 35. [METHOD] models.Usuario.<init>()V
   * Goal 36. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 37. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 38. [METHODNOEX] models.Usuario.<init>()V
   * Goal 39. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 40. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 41. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 42. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 43. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 44. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 45. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 46. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 47. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 48. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 49. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 50. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 51. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 52. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 53. Weak Mutation 98: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceVariable other -> this
   * Goal 54. Weak Mutation 99: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceComparisonOperator > -> -2
   * Goal 55. Weak Mutation 103: models.Usuario.equals(Ljava/lang/Object;)Z:88 - ReplaceComparisonOperator != null -> = null
   * Goal 56. Weak Mutation 104: models.Usuario.equals(Ljava/lang/Object;)Z:89 - ReplaceVariable other -> this
   * Goal 57. Weak Mutation 105: models.Usuario.equals(Ljava/lang/Object;)Z:89 - ReplaceComparisonOperator = null -> != null
   * Goal 58. Weak Mutation 112: models.Usuario.equals(Ljava/lang/Object;)Z:95 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("q~4p?9ZfSdoJ84XQMJ");
      Usuario usuario1 = new Usuario();
      assertFalse(usuario1.equals((Object)usuario0));
      
      usuario1.setEmail("q~4p?9ZfSdoJ84XQMJ");
      boolean boolean0 = usuario0.equals(usuario1);
      assertTrue(usuario1.equals((Object)usuario0));
      assertTrue(boolean0);
  }

  //Test case number: 7
  /*
   * 49 covered goals:
   * Goal 1. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - false
   * Goal 9. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 10. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 11. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 12. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 13. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 14. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I53 Branch 8 IFNULL L82 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 18. models.Usuario.<init>()V: Line 20
   * Goal 19. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 20. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 21. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 22. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 23. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 24. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 82
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 83
   * Goal 27. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 28. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 29. [METHOD] models.Usuario.<init>()V
   * Goal 30. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 31. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 32. [METHODNOEX] models.Usuario.<init>()V
   * Goal 33. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 34. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 35. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 36. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 38. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 42. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 46. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 47. Weak Mutation 95: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceVariable other -> this
   * Goal 48. Weak Mutation 96: models.Usuario.equals(Ljava/lang/Object;)Z:82 - ReplaceComparisonOperator = null -> != null
   * Goal 49. Weak Mutation 97: models.Usuario.equals(Ljava/lang/Object;)Z:83 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      Usuario usuario1 = new Usuario();
      assertTrue(usuario1.equals((Object)usuario0));
      
      usuario1.setEmail("Invalid len");
      boolean boolean0 = usuario0.equals(usuario1);
      assertFalse(usuario1.equals((Object)usuario0));
      assertFalse(boolean0);
  }

  //Test case number: 8
  /*
   * 49 covered goals:
   * Goal 1. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 5. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true
   * Goal 6. models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - false
   * Goal 9. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 10. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 11. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 12. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 13. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 14. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I39 Branch 6 IF_ICMPEQ L78 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 15. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I48 Branch 7 IFNONNULL L81 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 16. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I65 Branch 9 IFGT L85 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 17. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 18. models.Usuario.<init>()V: Line 20
   * Goal 19. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 20. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 21. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 22. models.Usuario.equals(Ljava/lang/Object;)Z: Line 77
   * Goal 23. models.Usuario.equals(Ljava/lang/Object;)Z: Line 78
   * Goal 24. models.Usuario.equals(Ljava/lang/Object;)Z: Line 81
   * Goal 25. models.Usuario.equals(Ljava/lang/Object;)Z: Line 85
   * Goal 26. models.Usuario.equals(Ljava/lang/Object;)Z: Line 86
   * Goal 27. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 28. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 29. [METHOD] models.Usuario.<init>()V
   * Goal 30. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 31. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 32. [METHODNOEX] models.Usuario.<init>()V
   * Goal 33. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 34. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 35. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 36. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 37. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 38. Weak Mutation 83: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 39. Weak Mutation 84: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 40. Weak Mutation 85: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 41. Weak Mutation 86: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceVariable other -> this
   * Goal 42. Weak Mutation 87: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 88: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 89: models.Usuario.equals(Ljava/lang/Object;)Z:78 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 90: models.Usuario.equals(Ljava/lang/Object;)Z:78 - ReplaceComparisonOperator == -> -2
   * Goal 46. Weak Mutation 94: models.Usuario.equals(Ljava/lang/Object;)Z:81 - ReplaceComparisonOperator != null -> = null
   * Goal 47. Weak Mutation 98: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceVariable other -> this
   * Goal 48. Weak Mutation 100: models.Usuario.equals(Ljava/lang/Object;)Z:85 - ReplaceComparisonOperator > -> !=
   * Goal 49. Weak Mutation 102: models.Usuario.equals(Ljava/lang/Object;)Z:86 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail(":mA3iO");
      Usuario usuario1 = new Usuario();
      boolean boolean0 = usuario0.equals(usuario1);
      assertFalse(boolean0);
  }

  //Test case number: 9
  /*
   * 18 covered goals:
   * Goal 1. models.Usuario.<init>()V: root-Branch
   * Goal 2. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - false
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 6. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 7. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 8. models.Usuario.<init>()V: Line 20
   * Goal 9. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 10. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 11. models.Usuario.equals(Ljava/lang/Object;)Z: Line 72
   * Goal 12. [METHOD] models.Usuario.<init>()V
   * Goal 13. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 14. [METHODNOEX] models.Usuario.<init>()V
   * Goal 15. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 16. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 17. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 18. Weak Mutation 80: models.Usuario.equals(Ljava/lang/Object;)Z:72 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      boolean boolean0 = usuario0.equals((Object) null);
      assertFalse(boolean0);
  }

  //Test case number: 10
  /*
   * 14 covered goals:
   * Goal 1. models.Usuario.<init>()V: root-Branch
   * Goal 2. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false
   * Goal 3. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 4. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 5. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:True
   * Goal 6. models.Usuario.<init>()V: Line 20
   * Goal 7. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 8. models.Usuario.equals(Ljava/lang/Object;)Z: Line 69
   * Goal 9. [METHOD] models.Usuario.<init>()V
   * Goal 10. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 11. [METHODNOEX] models.Usuario.<init>()V
   * Goal 12. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 13. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 14. Weak Mutation 78: models.Usuario.equals(Ljava/lang/Object;)Z:69 - ReplaceConstant - 1 -> 0
   */

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      boolean boolean0 = usuario0.equals(usuario0);
      assertTrue(boolean0);
  }

  //Test case number: 11
  /*
   * 22 covered goals:
   * Goal 1. models.Usuario.<init>()V: root-Branch
   * Goal 2. models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true
   * Goal 3. models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true
   * Goal 4. models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - false
   * Goal 5. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 6. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I4 Branch 3 IF_ACMPNE L68 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 7. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I12 Branch 4 IFNONNULL L71 - true in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 8. Branch models.Usuario.equals(Ljava/lang/Object;)Z: I23 Branch 5 IF_ACMPEQ L74 - false in context: models.Usuario:equals(Ljava/lang/Object;)Z
   * Goal 9. [Output]: models.Usuario.equals(Ljava/lang/Object;)Z:False
   * Goal 10. models.Usuario.<init>()V: Line 20
   * Goal 11. models.Usuario.equals(Ljava/lang/Object;)Z: Line 68
   * Goal 12. models.Usuario.equals(Ljava/lang/Object;)Z: Line 71
   * Goal 13. models.Usuario.equals(Ljava/lang/Object;)Z: Line 74
   * Goal 14. models.Usuario.equals(Ljava/lang/Object;)Z: Line 75
   * Goal 15. [METHOD] models.Usuario.<init>()V
   * Goal 16. [METHOD] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 17. [METHODNOEX] models.Usuario.<init>()V
   * Goal 18. [METHODNOEX] models.Usuario.equals(Ljava/lang/Object;)Z
   * Goal 19. Weak Mutation 77: models.Usuario.equals(Ljava/lang/Object;)Z:68 - ReplaceComparisonOperator != -> ==
   * Goal 20. Weak Mutation 79: models.Usuario.equals(Ljava/lang/Object;)Z:71 - ReplaceComparisonOperator != null -> = null
   * Goal 21. Weak Mutation 81: models.Usuario.equals(Ljava/lang/Object;)Z:74 - ReplaceComparisonOperator == -> !=
   * Goal 22. Weak Mutation 82: models.Usuario.equals(Ljava/lang/Object;)Z:75 - ReplaceConstant - 0 -> 1
   */

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      boolean boolean0 = usuario0.equals("");
      assertFalse(boolean0);
  }

  //Test case number: 12
  /*
   * 84 covered goals:
   * Goal 1. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - false
   * Goal 4. models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - true
   * Goal 5. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. Branch models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - false in context: models.Usuario:hashCode()I
   * Goal 8. Branch models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - true in context: models.Usuario:hashCode()I
   * Goal 9. models.Usuario.<init>()V: Line 20
   * Goal 10. models.Usuario.hashCode()I: Line 58
   * Goal 11. models.Usuario.hashCode()I: Line 59
   * Goal 12. models.Usuario.hashCode()I: Line 60
   * Goal 13. models.Usuario.hashCode()I: Line 61
   * Goal 14. models.Usuario.hashCode()I: Line 62
   * Goal 15. models.Usuario.hashCode()I: Line 63
   * Goal 16. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 17. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 18. [METHOD] models.Usuario.<init>()V
   * Goal 19. [METHOD] models.Usuario.hashCode()I
   * Goal 20. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 21. [METHODNOEX] models.Usuario.<init>()V
   * Goal 22. [METHODNOEX] models.Usuario.hashCode()I
   * Goal 23. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 24. Weak Mutation 9: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 0
   * Goal 25. Weak Mutation 10: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 1
   * Goal 26. Weak Mutation 11: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> -1
   * Goal 27. Weak Mutation 12: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 30
   * Goal 28. Weak Mutation 13: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 32
   * Goal 29. Weak Mutation 14: models.Usuario.hashCode()I:59 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 15: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 0
   * Goal 31. Weak Mutation 16: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 1
   * Goal 32. Weak Mutation 17: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> -1
   * Goal 33. Weak Mutation 18: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 30
   * Goal 34. Weak Mutation 19: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 32
   * Goal 35. Weak Mutation 20: models.Usuario.hashCode()I:60 - ReplaceVariable result -> prime
   * Goal 36. Weak Mutation 21: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation of result
   * Goal 37. Weak Mutation 22: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC 1 result
   * Goal 38. Weak Mutation 23: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC -1 result
   * Goal 39. Weak Mutation 24: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> +
   * Goal 40. Weak Mutation 25: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> %
   * Goal 41. Weak Mutation 26: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> -
   * Goal 42. Weak Mutation 28: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 29: models.Usuario.hashCode()I:60 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 30: models.Usuario.hashCode()I:60 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 31: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> %
   * Goal 46. Weak Mutation 34: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> /
   * Goal 47. Weak Mutation 35: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 0
   * Goal 48. Weak Mutation 36: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 1
   * Goal 49. Weak Mutation 37: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> -1
   * Goal 50. Weak Mutation 38: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 30
   * Goal 51. Weak Mutation 39: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 32
   * Goal 52. Weak Mutation 41: models.Usuario.hashCode()I:61 - InsertUnaryOp Negation of result
   * Goal 53. Weak Mutation 42: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC 1 result
   * Goal 54. Weak Mutation 43: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC -1 result
   * Goal 55. Weak Mutation 44: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> +
   * Goal 56. Weak Mutation 45: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> %
   * Goal 57. Weak Mutation 46: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> -
   * Goal 58. Weak Mutation 47: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> /
   * Goal 59. Weak Mutation 48: models.Usuario.hashCode()I:61 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 49: models.Usuario.hashCode()I:61 - ReplaceConstant - 0 -> 1
   * Goal 61. Weak Mutation 50: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> %
   * Goal 62. Weak Mutation 53: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> /
   * Goal 63. Weak Mutation 54: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 0
   * Goal 64. Weak Mutation 55: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 1
   * Goal 65. Weak Mutation 56: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> -1
   * Goal 66. Weak Mutation 57: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 30
   * Goal 67. Weak Mutation 58: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 32
   * Goal 68. Weak Mutation 59: models.Usuario.hashCode()I:62 - ReplaceVariable result -> prime
   * Goal 69. Weak Mutation 60: models.Usuario.hashCode()I:62 - InsertUnaryOp Negation of result
   * Goal 70. Weak Mutation 61: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC 1 result
   * Goal 71. Weak Mutation 62: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC -1 result
   * Goal 72. Weak Mutation 63: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> +
   * Goal 73. Weak Mutation 64: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> %
   * Goal 74. Weak Mutation 65: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> -
   * Goal 75. Weak Mutation 66: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> /
   * Goal 76. Weak Mutation 67: models.Usuario.hashCode()I:62 - ReplaceComparisonOperator != null -> = null
   * Goal 77. Weak Mutation 69: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> %
   * Goal 78. Weak Mutation 70: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> -
   * Goal 79. Weak Mutation 71: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> *
   * Goal 80. Weak Mutation 72: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> /
   * Goal 81. Weak Mutation 73: models.Usuario.hashCode()I:63 - ReplaceVariable result -> prime
   * Goal 82. Weak Mutation 74: models.Usuario.hashCode()I:63 - InsertUnaryOp Negation of result
   * Goal 83. Weak Mutation 75: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC 1 result
   * Goal 84. Weak Mutation 76: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC -1 result
   */

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setNome(" qw^-wVSK0.gu");
      usuario0.hashCode();
  }

  //Test case number: 13
  /*
   * 77 covered goals:
   * Goal 1. models.Usuario.<init>()V: root-Branch
   * Goal 2. models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - false
   * Goal 3. models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - false
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. Branch models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - false in context: models.Usuario:hashCode()I
   * Goal 6. Branch models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - false in context: models.Usuario:hashCode()I
   * Goal 7. models.Usuario.<init>()V: Line 20
   * Goal 8. models.Usuario.hashCode()I: Line 58
   * Goal 9. models.Usuario.hashCode()I: Line 59
   * Goal 10. models.Usuario.hashCode()I: Line 60
   * Goal 11. models.Usuario.hashCode()I: Line 61
   * Goal 12. models.Usuario.hashCode()I: Line 62
   * Goal 13. models.Usuario.hashCode()I: Line 63
   * Goal 14. [METHOD] models.Usuario.<init>()V
   * Goal 15. [METHOD] models.Usuario.hashCode()I
   * Goal 16. [METHODNOEX] models.Usuario.<init>()V
   * Goal 17. [METHODNOEX] models.Usuario.hashCode()I
   * Goal 18. Weak Mutation 9: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 0
   * Goal 19. Weak Mutation 10: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 1
   * Goal 20. Weak Mutation 11: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> -1
   * Goal 21. Weak Mutation 12: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 30
   * Goal 22. Weak Mutation 13: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 32
   * Goal 23. Weak Mutation 14: models.Usuario.hashCode()I:59 - ReplaceConstant - 1 -> 0
   * Goal 24. Weak Mutation 15: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 0
   * Goal 25. Weak Mutation 16: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 1
   * Goal 26. Weak Mutation 17: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> -1
   * Goal 27. Weak Mutation 18: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 30
   * Goal 28. Weak Mutation 19: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 32
   * Goal 29. Weak Mutation 20: models.Usuario.hashCode()I:60 - ReplaceVariable result -> prime
   * Goal 30. Weak Mutation 21: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation of result
   * Goal 31. Weak Mutation 22: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC 1 result
   * Goal 32. Weak Mutation 23: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC -1 result
   * Goal 33. Weak Mutation 24: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> +
   * Goal 34. Weak Mutation 25: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> %
   * Goal 35. Weak Mutation 26: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> -
   * Goal 36. Weak Mutation 28: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation
   * Goal 37. Weak Mutation 29: models.Usuario.hashCode()I:60 - InsertUnaryOp +1
   * Goal 38. Weak Mutation 30: models.Usuario.hashCode()I:60 - InsertUnaryOp -1
   * Goal 39. Weak Mutation 31: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> %
   * Goal 40. Weak Mutation 34: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> /
   * Goal 41. Weak Mutation 35: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 0
   * Goal 42. Weak Mutation 36: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 1
   * Goal 43. Weak Mutation 37: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> -1
   * Goal 44. Weak Mutation 38: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 30
   * Goal 45. Weak Mutation 39: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 32
   * Goal 46. Weak Mutation 41: models.Usuario.hashCode()I:61 - InsertUnaryOp Negation of result
   * Goal 47. Weak Mutation 42: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC 1 result
   * Goal 48. Weak Mutation 43: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC -1 result
   * Goal 49. Weak Mutation 44: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> +
   * Goal 50. Weak Mutation 45: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> %
   * Goal 51. Weak Mutation 46: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> -
   * Goal 52. Weak Mutation 47: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> /
   * Goal 53. Weak Mutation 48: models.Usuario.hashCode()I:61 - ReplaceComparisonOperator != null -> = null
   * Goal 54. Weak Mutation 49: models.Usuario.hashCode()I:61 - ReplaceConstant - 0 -> 1
   * Goal 55. Weak Mutation 50: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> %
   * Goal 56. Weak Mutation 53: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> /
   * Goal 57. Weak Mutation 54: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 0
   * Goal 58. Weak Mutation 55: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 1
   * Goal 59. Weak Mutation 56: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> -1
   * Goal 60. Weak Mutation 57: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 30
   * Goal 61. Weak Mutation 58: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 32
   * Goal 62. Weak Mutation 59: models.Usuario.hashCode()I:62 - ReplaceVariable result -> prime
   * Goal 63. Weak Mutation 60: models.Usuario.hashCode()I:62 - InsertUnaryOp Negation of result
   * Goal 64. Weak Mutation 61: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC 1 result
   * Goal 65. Weak Mutation 62: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC -1 result
   * Goal 66. Weak Mutation 63: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> +
   * Goal 67. Weak Mutation 64: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> %
   * Goal 68. Weak Mutation 65: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> -
   * Goal 69. Weak Mutation 66: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> /
   * Goal 70. Weak Mutation 67: models.Usuario.hashCode()I:62 - ReplaceComparisonOperator != null -> = null
   * Goal 71. Weak Mutation 68: models.Usuario.hashCode()I:62 - ReplaceConstant - 0 -> 1
   * Goal 72. Weak Mutation 69: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> %
   * Goal 73. Weak Mutation 72: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> /
   * Goal 74. Weak Mutation 73: models.Usuario.hashCode()I:63 - ReplaceVariable result -> prime
   * Goal 75. Weak Mutation 74: models.Usuario.hashCode()I:63 - InsertUnaryOp Negation of result
   * Goal 76. Weak Mutation 75: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC 1 result
   * Goal 77. Weak Mutation 76: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC -1 result
   */

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.hashCode();
  }

  //Test case number: 14
  /*
   * 84 covered goals:
   * Goal 1. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - true
   * Goal 4. models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - false
   * Goal 5. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. Branch models.Usuario.hashCode()I: I24 Branch 1 IFNONNULL L61 - true in context: models.Usuario:hashCode()I
   * Goal 8. Branch models.Usuario.hashCode()I: I41 Branch 2 IFNONNULL L62 - false in context: models.Usuario:hashCode()I
   * Goal 9. models.Usuario.<init>()V: Line 20
   * Goal 10. models.Usuario.hashCode()I: Line 58
   * Goal 11. models.Usuario.hashCode()I: Line 59
   * Goal 12. models.Usuario.hashCode()I: Line 60
   * Goal 13. models.Usuario.hashCode()I: Line 61
   * Goal 14. models.Usuario.hashCode()I: Line 62
   * Goal 15. models.Usuario.hashCode()I: Line 63
   * Goal 16. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 17. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 18. [METHOD] models.Usuario.<init>()V
   * Goal 19. [METHOD] models.Usuario.hashCode()I
   * Goal 20. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 21. [METHODNOEX] models.Usuario.<init>()V
   * Goal 22. [METHODNOEX] models.Usuario.hashCode()I
   * Goal 23. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 24. Weak Mutation 9: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 0
   * Goal 25. Weak Mutation 10: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 1
   * Goal 26. Weak Mutation 11: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> -1
   * Goal 27. Weak Mutation 12: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 30
   * Goal 28. Weak Mutation 13: models.Usuario.hashCode()I:58 - ReplaceConstant - 31 -> 32
   * Goal 29. Weak Mutation 14: models.Usuario.hashCode()I:59 - ReplaceConstant - 1 -> 0
   * Goal 30. Weak Mutation 15: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 0
   * Goal 31. Weak Mutation 16: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 1
   * Goal 32. Weak Mutation 17: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> -1
   * Goal 33. Weak Mutation 18: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 30
   * Goal 34. Weak Mutation 19: models.Usuario.hashCode()I:60 - ReplaceConstant - 31 -> 32
   * Goal 35. Weak Mutation 20: models.Usuario.hashCode()I:60 - ReplaceVariable result -> prime
   * Goal 36. Weak Mutation 21: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation of result
   * Goal 37. Weak Mutation 22: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC 1 result
   * Goal 38. Weak Mutation 23: models.Usuario.hashCode()I:60 - InsertUnaryOp IINC -1 result
   * Goal 39. Weak Mutation 24: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> +
   * Goal 40. Weak Mutation 25: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> %
   * Goal 41. Weak Mutation 26: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator * -> -
   * Goal 42. Weak Mutation 28: models.Usuario.hashCode()I:60 - InsertUnaryOp Negation
   * Goal 43. Weak Mutation 29: models.Usuario.hashCode()I:60 - InsertUnaryOp +1
   * Goal 44. Weak Mutation 30: models.Usuario.hashCode()I:60 - InsertUnaryOp -1
   * Goal 45. Weak Mutation 31: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> %
   * Goal 46. Weak Mutation 34: models.Usuario.hashCode()I:60 - ReplaceArithmeticOperator + -> /
   * Goal 47. Weak Mutation 35: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 0
   * Goal 48. Weak Mutation 36: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 1
   * Goal 49. Weak Mutation 37: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> -1
   * Goal 50. Weak Mutation 38: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 30
   * Goal 51. Weak Mutation 39: models.Usuario.hashCode()I:61 - ReplaceConstant - 31 -> 32
   * Goal 52. Weak Mutation 41: models.Usuario.hashCode()I:61 - InsertUnaryOp Negation of result
   * Goal 53. Weak Mutation 42: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC 1 result
   * Goal 54. Weak Mutation 43: models.Usuario.hashCode()I:61 - InsertUnaryOp IINC -1 result
   * Goal 55. Weak Mutation 44: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> +
   * Goal 56. Weak Mutation 45: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> %
   * Goal 57. Weak Mutation 46: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> -
   * Goal 58. Weak Mutation 47: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator * -> /
   * Goal 59. Weak Mutation 48: models.Usuario.hashCode()I:61 - ReplaceComparisonOperator != null -> = null
   * Goal 60. Weak Mutation 50: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> %
   * Goal 61. Weak Mutation 51: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> -
   * Goal 62. Weak Mutation 52: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> *
   * Goal 63. Weak Mutation 53: models.Usuario.hashCode()I:61 - ReplaceArithmeticOperator + -> /
   * Goal 64. Weak Mutation 54: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 0
   * Goal 65. Weak Mutation 55: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 1
   * Goal 66. Weak Mutation 56: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> -1
   * Goal 67. Weak Mutation 57: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 30
   * Goal 68. Weak Mutation 58: models.Usuario.hashCode()I:62 - ReplaceConstant - 31 -> 32
   * Goal 69. Weak Mutation 59: models.Usuario.hashCode()I:62 - ReplaceVariable result -> prime
   * Goal 70. Weak Mutation 60: models.Usuario.hashCode()I:62 - InsertUnaryOp Negation of result
   * Goal 71. Weak Mutation 61: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC 1 result
   * Goal 72. Weak Mutation 62: models.Usuario.hashCode()I:62 - InsertUnaryOp IINC -1 result
   * Goal 73. Weak Mutation 63: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> +
   * Goal 74. Weak Mutation 64: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> %
   * Goal 75. Weak Mutation 65: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> -
   * Goal 76. Weak Mutation 66: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator * -> /
   * Goal 77. Weak Mutation 67: models.Usuario.hashCode()I:62 - ReplaceComparisonOperator != null -> = null
   * Goal 78. Weak Mutation 68: models.Usuario.hashCode()I:62 - ReplaceConstant - 0 -> 1
   * Goal 79. Weak Mutation 69: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> %
   * Goal 80. Weak Mutation 72: models.Usuario.hashCode()I:62 - ReplaceArithmeticOperator + -> /
   * Goal 81. Weak Mutation 73: models.Usuario.hashCode()I:63 - ReplaceVariable result -> prime
   * Goal 82. Weak Mutation 74: models.Usuario.hashCode()I:63 - InsertUnaryOp Negation of result
   * Goal 83. Weak Mutation 75: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC 1 result
   * Goal 84. Weak Mutation 76: models.Usuario.hashCode()I:63 - InsertUnaryOp IINC -1 result
   */

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("JCs[DZSlG1?EIMWSC5u");
      usuario0.hashCode();
  }

  //Test case number: 16
  /*
   * 10 covered goals:
   * Goal 1. models.Usuario.<init>()V: root-Branch
   * Goal 2. models.Usuario.setSenha(Ljava/lang/String;)V: root-Branch
   * Goal 3. Branch models.Usuario.setSenha(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setSenha(Ljava/lang/String;)V
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. setSenha(Ljava/lang/String;)V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 6. models.Usuario.<init>()V: Line 20
   * Goal 7. models.Usuario.setSenha(Ljava/lang/String;)V: Line 49
   * Goal 8. [METHOD] models.Usuario.<init>()V
   * Goal 9. [METHOD] models.Usuario.setSenha(Ljava/lang/String;)V
   * Goal 10. [METHODNOEX] models.Usuario.<init>()V
   */

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      // Undeclared exception!
      try { 
        usuario0.setSenha("");
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 17
  /*
   * 17 covered goals:
   * Goal 1. models.Usuario.getEmail()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch
   * Goal 3. models.Usuario.<init>()V: root-Branch
   * Goal 4. Branch models.Usuario.setEmail(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setEmail(Ljava/lang/String;)V
   * Goal 5. Branch models.Usuario.getEmail()Ljava/lang/String;: root-Branch in context: models.Usuario:getEmail()Ljava/lang/String;
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. [Output]: models.Usuario.getEmail()Ljava/lang/String;:EmptyString
   * Goal 8. models.Usuario.<init>()V: Line 20
   * Goal 9. models.Usuario.getEmail()Ljava/lang/String;: Line 41
   * Goal 10. models.Usuario.setEmail(Ljava/lang/String;)V: Line 45
   * Goal 11. models.Usuario.setEmail(Ljava/lang/String;)V: Line 46
   * Goal 12. [METHOD] models.Usuario.<init>()V
   * Goal 13. [METHOD] models.Usuario.getEmail()Ljava/lang/String;
   * Goal 14. [METHOD] models.Usuario.setEmail(Ljava/lang/String;)V
   * Goal 15. [METHODNOEX] models.Usuario.<init>()V
   * Goal 16. [METHODNOEX] models.Usuario.getEmail()Ljava/lang/String;
   * Goal 17. [METHODNOEX] models.Usuario.setEmail(Ljava/lang/String;)V
   */

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setEmail("");
      String string0 = usuario0.getEmail();
      assertEquals("", string0);
  }

  //Test case number: 18
  /*
   * 17 covered goals:
   * Goal 1. models.Usuario.getNome()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.setNome(Ljava/lang/String;)V: root-Branch
   * Goal 3. models.Usuario.<init>()V: root-Branch
   * Goal 4. Branch models.Usuario.setNome(Ljava/lang/String;)V: root-Branch in context: models.Usuario:setNome(Ljava/lang/String;)V
   * Goal 5. Branch models.Usuario.getNome()Ljava/lang/String;: root-Branch in context: models.Usuario:getNome()Ljava/lang/String;
   * Goal 6. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 7. [Output]: models.Usuario.getNome()Ljava/lang/String;:EmptyString
   * Goal 8. models.Usuario.<init>()V: Line 20
   * Goal 9. models.Usuario.getNome()Ljava/lang/String;: Line 33
   * Goal 10. models.Usuario.setNome(Ljava/lang/String;)V: Line 37
   * Goal 11. models.Usuario.setNome(Ljava/lang/String;)V: Line 38
   * Goal 12. [METHOD] models.Usuario.<init>()V
   * Goal 13. [METHOD] models.Usuario.getNome()Ljava/lang/String;
   * Goal 14. [METHOD] models.Usuario.setNome(Ljava/lang/String;)V
   * Goal 15. [METHODNOEX] models.Usuario.<init>()V
   * Goal 16. [METHODNOEX] models.Usuario.getNome()Ljava/lang/String;
   * Goal 17. [METHODNOEX] models.Usuario.setNome(Ljava/lang/String;)V
   */

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      usuario0.setNome("");
      String string0 = usuario0.getNome();
      assertEquals("", string0);
  }

  //Test case number: 19
  /*
   * 11 covered goals:
   * Goal 1. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch
   * Goal 2. Branch models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: root-Branch in context: models.Usuario:<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
   * Goal 3. <init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V_org.evosuite.runtime.TooManyResourcesException_IMPLICIT
   * Goal 4. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 23
   * Goal 5. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 24
   * Goal 6. models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V: Line 25
   * Goal 7. [METHOD] models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V
   * Goal 8. Weak Mutation 0: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:23 - ReplaceVariable nome -> login
   * Goal 9. Weak Mutation 1: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:23 - ReplaceVariable nome -> senha
   * Goal 10. Weak Mutation 3: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:24 - ReplaceVariable login -> nome
   * Goal 11. Weak Mutation 5: models.Usuario.<init>(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V:25 - ReplaceVariable senha -> nome
   */

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Usuario usuario0 = null;
      try {
        usuario0 = new Usuario("", "[]:)7L*!t)T,)U)'", "[]:)7L*!t)T,)U)'");
        fail("Expecting exception: TooManyResourcesException");
      
      } catch(TooManyResourcesException e) {
         //
         // Loop has been executed more times than the allowed 10000
         //
         assertThrownBy("org.evosuite.runtime.LoopCounter", e);
      }
  }

  //Test case number: 20
  /*
   * 11 covered goals:
   * Goal 1. models.Usuario.getEmail()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. Branch models.Usuario.getEmail()Ljava/lang/String;: root-Branch in context: models.Usuario:getEmail()Ljava/lang/String;
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. [Output]: models.Usuario.getEmail()Ljava/lang/String;:Null
   * Goal 6. models.Usuario.<init>()V: Line 20
   * Goal 7. models.Usuario.getEmail()Ljava/lang/String;: Line 41
   * Goal 8. [METHOD] models.Usuario.<init>()V
   * Goal 9. [METHOD] models.Usuario.getEmail()Ljava/lang/String;
   * Goal 10. [METHODNOEX] models.Usuario.<init>()V
   * Goal 11. [METHODNOEX] models.Usuario.getEmail()Ljava/lang/String;
   */

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      String string0 = usuario0.getEmail();
      assertNull(string0);
  }

  //Test case number: 21
  /*
   * 10 covered goals:
   * Goal 1. models.Usuario.checaSenha(Ljava/lang/String;)Z: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. Branch models.Usuario.checaSenha(Ljava/lang/String;)Z: root-Branch in context: models.Usuario:checaSenha(Ljava/lang/String;)Z
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. checaSenha(Ljava/lang/String;)Z_java.lang.NullPointerException_IMPLICIT
   * Goal 6. models.Usuario.<init>()V: Line 20
   * Goal 7. models.Usuario.checaSenha(Ljava/lang/String;)Z: Line 53
   * Goal 8. [METHOD] models.Usuario.<init>()V
   * Goal 9. [METHOD] models.Usuario.checaSenha(Ljava/lang/String;)Z
   * Goal 10. [METHODNOEX] models.Usuario.<init>()V
   */

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      // Undeclared exception!
      try { 
        usuario0.getSenha();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         assertThrownBy("models.util.BCrypt", e);
      }
  }

  //Test case number: 22
  /*
   * 11 covered goals:
   * Goal 1. models.Usuario.getNome()Ljava/lang/String;: root-Branch
   * Goal 2. models.Usuario.<init>()V: root-Branch
   * Goal 3. Branch models.Usuario.getNome()Ljava/lang/String;: root-Branch in context: models.Usuario:getNome()Ljava/lang/String;
   * Goal 4. Branch models.Usuario.<init>()V: root-Branch in context: models.Usuario:<init>()V
   * Goal 5. [Output]: models.Usuario.getNome()Ljava/lang/String;:Null
   * Goal 6. models.Usuario.<init>()V: Line 20
   * Goal 7. models.Usuario.getNome()Ljava/lang/String;: Line 33
   * Goal 8. [METHOD] models.Usuario.<init>()V
   * Goal 9. [METHOD] models.Usuario.getNome()Ljava/lang/String;
   * Goal 10. [METHODNOEX] models.Usuario.<init>()V
   * Goal 11. [METHODNOEX] models.Usuario.getNome()Ljava/lang/String;
   */

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Usuario usuario0 = new Usuario();
      String string0 = usuario0.getNome();
      assertNull(string0);
  }
}
